// ============================================================================
//
// Copyright (c) 2005-2009, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 4.1.0.M2_r45078).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package mq_test1.sfsensorinserter_1_1;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: SFSensorInserter Purpose: <br>
 * Description: The module take <br>
 * 
 * @author kyle.bowerman@gmail.com
 * @version 4.1.0.M2_r45078
 * @status
 */
public class SFSensorInserter {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (pin != null) {

				this.setProperty("pin", pin.toString());

			}

			if (value != null) {

				this.setProperty("value", value.toString());

			}

			if (type != null) {

				this.setProperty("type", type.toString());

			}

			if (clientId != null) {

				this.setProperty("clientId", clientId.toString());

			}

		}

		public Double pin;

		public Double getPin() {
			return this.pin;
		}

		public Double value;

		public Double getValue() {
			return this.value;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String clientId;

		public String getClientId() {
			return this.clientId;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.1";
	private final String jobName = "SFSensorInserter";
	private final String projectName = "MQ_TEST1";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SFSensorInserter.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SFSensorInserter.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRowGenerator_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());
		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSalesforceOutput_1", System.currentTimeMillis());
		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());
		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String LastModifiedById;

		public String getLastModifiedById() {
			return this.LastModifiedById;
		}

		public java.util.Date LastModifiedDate;

		public java.util.Date getLastModifiedDate() {
			return this.LastModifiedDate;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date SystemModstamp;

		public java.util.Date getSystemModstamp() {
			return this.SystemModstamp;
		}

		public Double pin__c;

		public Double getPin__c() {
			return this.pin__c;
		}

		public String type__c;

		public String getType__c() {
			return this.type__c;
		}

		public Double value__c;

		public Double getValue__c() {
			return this.value__c;
		}

		public String clientId__c;

		public String getClientId__c() {
			return this.clientId__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.CreatedById = readString(dis);

					this.CreatedDate = readDate(dis);

					this.Id = readString(dis);

					this.LastModifiedById = readString(dis);

					this.LastModifiedDate = readDate(dis);

					this.Name = readString(dis);

					this.OwnerId = readString(dis);

					this.SystemModstamp = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.pin__c = null;
					} else {
						this.pin__c = dis.readDouble();
					}

					this.type__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value__c = null;
					} else {
						this.value__c = dis.readDouble();
					}

					this.clientId__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CreatedById, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.LastModifiedById, dos);

				// java.util.Date

				writeDate(this.LastModifiedDate, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.SystemModstamp, dos);

				// Double

				if (this.pin__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pin__c);
				}

				// String

				writeString(this.type__c, dos);

				// Double

				if (this.value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.value__c);
				}

				// String

				writeString(this.clientId__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CreatedById=" + CreatedById);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",Id=" + Id);
			sb.append(",LastModifiedById=" + LastModifiedById);
			sb.append(",LastModifiedDate=" + String.valueOf(LastModifiedDate));
			sb.append(",Name=" + Name);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",SystemModstamp=" + String.valueOf(SystemModstamp));
			sb.append(",pin__c=" + String.valueOf(pin__c));
			sb.append(",type__c=" + type__c);
			sb.append(",value__c=" + String.valueOf(value__c));
			sb.append(",clientId__c=" + clientId__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String LastModifiedById;

		public String getLastModifiedById() {
			return this.LastModifiedById;
		}

		public java.util.Date LastModifiedDate;

		public java.util.Date getLastModifiedDate() {
			return this.LastModifiedDate;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date SystemModstamp;

		public java.util.Date getSystemModstamp() {
			return this.SystemModstamp;
		}

		public Double pin__c;

		public Double getPin__c() {
			return this.pin__c;
		}

		public String type__c;

		public String getType__c() {
			return this.type__c;
		}

		public Double value__c;

		public Double getValue__c() {
			return this.value__c;
		}

		public String clientId__c;

		public String getClientId__c() {
			return this.clientId__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.CreatedById = readString(dis);

					this.CreatedDate = readDate(dis);

					this.Id = readString(dis);

					this.LastModifiedById = readString(dis);

					this.LastModifiedDate = readDate(dis);

					this.Name = readString(dis);

					this.OwnerId = readString(dis);

					this.SystemModstamp = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.pin__c = null;
					} else {
						this.pin__c = dis.readDouble();
					}

					this.type__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value__c = null;
					} else {
						this.value__c = dis.readDouble();
					}

					this.clientId__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CreatedById, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.LastModifiedById, dos);

				// java.util.Date

				writeDate(this.LastModifiedDate, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.SystemModstamp, dos);

				// Double

				if (this.pin__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pin__c);
				}

				// String

				writeString(this.type__c, dos);

				// Double

				if (this.value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.value__c);
				}

				// String

				writeString(this.clientId__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CreatedById=" + CreatedById);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",Id=" + Id);
			sb.append(",LastModifiedById=" + LastModifiedById);
			sb.append(",LastModifiedDate=" + String.valueOf(LastModifiedDate));
			sb.append(",Name=" + Name);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",SystemModstamp=" + String.valueOf(SystemModstamp));
			sb.append(",pin__c=" + String.valueOf(pin__c));
			sb.append(",type__c=" + type__c);
			sb.append(",value__c=" + String.valueOf(value__c));
			sb.append(",clientId__c=" + clientId__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out2Struct out2 = new out2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());
				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				int nb_line_tLogRow_1 = 0;

				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tSalesforceOutput_1 begin ] start
				 */

				ok_Hash.put("tSalesforceOutput_1", false);
				start_Hash.put("tSalesforceOutput_1", System
						.currentTimeMillis());
				currentComponent = "tSalesforceOutput_1";

				int tos_count_tSalesforceOutput_1 = 0;

				int nb_line_tSalesforceOutput_1 = 0;
				int nb_success_tSalesforceOutput_1 = 0;
				int nb_reject_tSalesforceOutput_1 = 0;

				org.talend.salesforce.SforceManagement sforceManagement_tSalesforceOutput_1 = new org.talend.salesforce.SforceManagementImpl();
				sforceManagement_tSalesforceOutput_1.setTimeout(60000);
				sforceManagement_tSalesforceOutput_1.setNeedCompression(false);
				sforceManagement_tSalesforceOutput_1.login(
						"kyle.bowerman@gmail.com",
						"salmon713LlqhicJUbxC8b2ubpmcHdmB",
						"https://www.salesforce.com/services/Soap/u/16.0", 200,
						true, "");

				/**
				 * [tSalesforceOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					Double var1;
					Double var2;
					String var3;
					String var4;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1;

				class tRowGenerator_1Randomizer {
					public String getRandomnewColumn() {

						return TalendString.getAsciiRandomString(6);

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row1.newColumn = randtRowGenerator_1.getRandomnewColumn();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */
					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;
						Var.var1 = context.pin;
						Var.var2 = context.value;
						Var.var3 = context.type;
						Var.var4 = context.clientId;// ###############################
						// ###############################
						// # Output tables

						out2 = null;

						// # Output table : 'out2'
						out2_tmp.CreatedById = null;
						out2_tmp.CreatedDate = null;
						out2_tmp.Id = null;
						out2_tmp.LastModifiedById = null;
						out2_tmp.LastModifiedDate = null;
						out2_tmp.Name = null;
						out2_tmp.OwnerId = null;
						out2_tmp.SystemModstamp = null;
						out2_tmp.pin__c = Var.var1;
						out2_tmp.type__c = Var.var3;
						out2_tmp.value__c = Var.var2;
						out2_tmp.clientId__c = Var.var4;
						out2 = out2_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "out2"
					if (out2 != null) {

						/**
						 * [tSalesforceOutput_1 main ] start
						 */

						currentComponent = "tSalesforceOutput_1";

						row3 = null;
						// /////////////////////

						Object[] resultMessageObj_tSalesforceOutput_1 = null;

						java.util.List<org.apache.axis.message.MessageElement> list_tSalesforceOutput_1 = new java.util.ArrayList<org.apache.axis.message.MessageElement>();
						java.util.List<String> nullList_tSalesforceOutput_1 = new java.util.ArrayList<String>();

						if (out2.CreatedById != null
								&& !"".equals(String.valueOf(out2.CreatedById))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"CreatedById",
													String
															.valueOf(out2.CreatedById)));
						} else {
							nullList_tSalesforceOutput_1.add("CreatedById");
						}

						if (out2.CreatedDate != null) {
							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"CreatedDate",
													FormatterUtils
															.format_Date(
																	out2.CreatedDate,
																	"yyyy-MM-dd'T'HH:mm:ss'.000Z'")));
						} else {
							nullList_tSalesforceOutput_1.add("CreatedDate");
						}

						if (out2.LastModifiedById != null
								&& !"".equals(String
										.valueOf(out2.LastModifiedById))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"LastModifiedById",
													String
															.valueOf(out2.LastModifiedById)));
						} else {
							nullList_tSalesforceOutput_1
									.add("LastModifiedById");
						}

						if (out2.LastModifiedDate != null) {
							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"LastModifiedDate",
													FormatterUtils
															.format_Date(
																	out2.LastModifiedDate,
																	"yyyy-MM-dd'T'HH:mm:ss'.000Z'")));
						} else {
							nullList_tSalesforceOutput_1
									.add("LastModifiedDate");
						}

						if (out2.Name != null
								&& !"".equals(String.valueOf(out2.Name))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement("Name", String
													.valueOf(out2.Name)));
						} else {
							nullList_tSalesforceOutput_1.add("Name");
						}

						if (out2.OwnerId != null
								&& !"".equals(String.valueOf(out2.OwnerId))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"OwnerId",
													String
															.valueOf(out2.OwnerId)));
						} else {
							nullList_tSalesforceOutput_1.add("OwnerId");
						}

						if (out2.SystemModstamp != null) {
							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"SystemModstamp",
													FormatterUtils
															.format_Date(
																	out2.SystemModstamp,
																	"yyyy-MM-dd'T'HH:mm:ss'.000Z'")));
						} else {
							nullList_tSalesforceOutput_1.add("SystemModstamp");
						}

						if (out2.pin__c != null
								&& !"".equals(String.valueOf(out2.pin__c))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement("pin__c", String
													.valueOf(out2.pin__c)));
						} else {
							nullList_tSalesforceOutput_1.add("pin__c");
						}

						if (out2.type__c != null
								&& !"".equals(String.valueOf(out2.type__c))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"type__c",
													String
															.valueOf(out2.type__c)));
						} else {
							nullList_tSalesforceOutput_1.add("type__c");
						}

						if (out2.value__c != null
								&& !"".equals(String.valueOf(out2.value__c))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"value__c",
													String
															.valueOf(out2.value__c)));
						} else {
							nullList_tSalesforceOutput_1.add("value__c");
						}

						if (out2.clientId__c != null
								&& !"".equals(String.valueOf(out2.clientId__c))) {

							list_tSalesforceOutput_1
									.add(sforceManagement_tSalesforceOutput_1
											.newMessageElement(
													"clientId__c",
													String
															.valueOf(out2.clientId__c)));
						} else {
							nullList_tSalesforceOutput_1.add("clientId__c");
						}

						resultMessageObj_tSalesforceOutput_1 = sforceManagement_tSalesforceOutput_1
								.insert(
										"sensor__c",
										(org.apache.axis.message.MessageElement[]) list_tSalesforceOutput_1
												.toArray(new org.apache.axis.message.MessageElement[list_tSalesforceOutput_1
														.size()]));

						nb_line_tSalesforceOutput_1++;

						nb_success_tSalesforceOutput_1++;
						row3 = new row3Struct();
						row3.CreatedById = out2.CreatedById;
						row3.CreatedDate = out2.CreatedDate;
						row3.Id = out2.Id;
						row3.LastModifiedById = out2.LastModifiedById;
						row3.LastModifiedDate = out2.LastModifiedDate;
						row3.Name = out2.Name;
						row3.OwnerId = out2.OwnerId;
						row3.SystemModstamp = out2.SystemModstamp;
						row3.pin__c = out2.pin__c;
						row3.type__c = out2.type__c;
						row3.value__c = out2.value__c;
						row3.clientId__c = out2.clientId__c;
						// /////////////////////

						tos_count_tSalesforceOutput_1++;

						/**
						 * [tSalesforceOutput_1 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// /////////////////////

							StringBuilder strBuffer_tLogRow_1 = new StringBuilder();

							if (row3.CreatedById != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.CreatedById));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.CreatedDate != null) { //              

								strBuffer_tLogRow_1
										.append(FormatterUtils.format_Date(
												row3.CreatedDate,
												"yyyy-MM-dd'T'HH:mm:ss'.000Z'"));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.Id != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.Id));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.LastModifiedById != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.LastModifiedById));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.LastModifiedDate != null) { //              

								strBuffer_tLogRow_1
										.append(FormatterUtils.format_Date(
												row3.LastModifiedDate,
												"yyyy-MM-dd'T'HH:mm:ss'.000Z'"));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.Name != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.Name));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.OwnerId != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.OwnerId));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.SystemModstamp != null) { //              

								strBuffer_tLogRow_1
										.append(FormatterUtils.format_Date(
												row3.SystemModstamp,
												"yyyy-MM-dd'T'HH:mm:ss'.000Z'"));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.pin__c != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.pin__c));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.type__c != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.type__c));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.value__c != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.value__c));

							} //  			

							strBuffer_tLogRow_1.append("|");

							if (row3.clientId__c != null) { //              

								strBuffer_tLogRow_1.append(String
										.valueOf(row3.clientId__c));

							} //  			

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}

							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

						} // End of branch "row3"

					} // End of branch "out2"

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSalesforceOutput_1 end ] start
				 */

				currentComponent = "tSalesforceOutput_1";

				sforceManagement_tSalesforceOutput_1.logout();

				globalMap.put("tSalesforceOutput_1_NB_LINE",
						nb_line_tSalesforceOutput_1);
				globalMap.put("tSalesforceOutput_1_NB_SUCCESS",
						nb_success_tSalesforceOutput_1);
				globalMap.put("tSalesforceOutput_1_NB_REJECT",
						nb_reject_tSalesforceOutput_1);

				ok_Hash.put("tSalesforceOutput_1", true);
				end_Hash.put("tSalesforceOutput_1", System.currentTimeMillis());

				/**
				 * [tSalesforceOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SFSensorInserter SFSensorInserterClass = new SFSensorInserter();

		int exitCode = SFSensorInserterClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = SFSensorInserter.class
					.getClassLoader().getResourceAsStream(
							"mq_test1/sfsensorinserter_1_1/contexts/"
									+ contextStr + ".properties");
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
				throw new IOException("Could not find the context "
						+ contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			try {
				context.pin = Double.parseDouble(context.getProperty("pin"));
			} catch (NumberFormatException e) {
				context.pin = null;
			}

			try {
				context.value = Double
						.parseDouble(context.getProperty("value"));
			} catch (NumberFormatException e) {
				context.value = null;
			}

			context.type = (String) context.getProperty("type");

			context.clientId = (String) context.getProperty("clientId");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("pin")) {
				context.pin = (Double) parentContextMap.get("pin");
			}
			if (parentContextMap.containsKey("value")) {
				context.value = (Double) parentContextMap.get("value");
			}
			if (parentContextMap.containsKey("type")) {
				context.type = (String) parentContextMap.get("type");
			}
			if (parentContextMap.containsKey("clientId")) {
				context.clientId = (String) parentContextMap.get("clientId");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRowGenerator_1Process(globalMap);
			status = "end";
		} catch (TalendException e_tRowGenerator_1) {
			status = "failure";
			e_tRowGenerator_1.printStackTrace();
			globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : SFSensorInserter");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "" + returnCode, "", "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 49808 characters generated by Talend Open Studio on the December 30, 2010
 * 10:45:51 AM EST
 ************************************************************************************************/
